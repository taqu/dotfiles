
# vim-ailrline
[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']

# vim-airline-themes
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

# vim-commentary
[[plugins]]
repo = 'tpope/vim-commentary'

# NERDTree
[[plugins]]
repo = 'preservim/nerdtree'

# color theme 
[[plugins]]
repo = 'yasukotelin/shirotelin'
[[plugins]]
repo = 'sjl/badwolf'

# vim-operator-user
[[plugins]]
repo = 'kana/vim-operator-user'

# vim-clang-format
#[[plugins]]
#repo = 'rhysd/vim-clang-format'

# vim-fugitive
[[plugins]]
repo = 'tpope/vim-fugitive'

# sonictemplate
[[plugins]]
repo = 'mattn/sonictemplate-vim'

# vim-surround
[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

# vim-lsp
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
if executable('clangd')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd']},
        \ 'whitelist': ['c', 'cpp']
        \ })
endif

let g:gopls_bin = $GOPATH."\\bin\\gopls"
if executable(g:gopls_bin)
    au User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->[g:gopls_bin]},
        \ 'whitelist': ['go'],
        \ 'workspace_config': {'gopls': {
        \     'staticcheck': v:true,
        \     'completeUnimported': v:true,
        \     'caseSensitiveCompletion': v:true,
        \     'usePlaceholders': v:true,
        \     'completionDocumentation': v:true,
        \     'watchFileChanges': v:true,
        \     'hoverKind': 'SingleLine',
        \     'expandWorkspaceToModule': v:true
        \  }}
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> <C-]> <plug>(lsp-definition)
    nmap <buffer> <f2> <plug>(lsp-rename)
    nmap <buffer> <Leader>d <plug>(lsp-type-definition)
    nmap <buffer> <Leader>r <plug>(lsp-references)
    nmap <buffer> <Leader>i <plug>(lsp-implementation)
    inoremap <expr> <cr> pumvisible() ? "\<c-y>\<cr>" : "\<cr>"
endfunction

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

let g:lsp_diagnostics_enabled = 1
"let g:lsp_diagnostics_echo_cursor = 1
"let g:asyncomplete_auto_popup = 1
"let g:asyncomplete_auto_completeopt = 0
let g:asyncomplete_popup_delay = 200
let g:lsp_text_edit_enabled = 1
let g:lsp_preview_float = 1
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_log_verbose = 0
"let g:lsp_log_file = ''

'''

